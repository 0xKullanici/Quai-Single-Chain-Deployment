sudp apt update && sudo apt upgrade
curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt-get install -y nodejs
npm install -g hardhat
mkdir deploy-simple-quai-contract
cd deploy-simple-quai-contract
npm init -y

npm install --save-dev hardhat

npm install dotenv quais quais-polling quai-hardhat-plugin

npx hardhat

nano Greeter.sol
//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.9;

contract Greeter {
    string private greeting;

    constructor(string memory _greeting) {
        greeting = _greeting;
    }

    function greet() public view returns (string memory) {
        return greeting;
    }

    function setGreeting(string memory _greeting) public {
        greeting = _greeting;
    }
}
touch .env
nano .env
## Sample environment file - change all values as needed

# Privkey - priv key for the account you want to deploy from
PRIVKEY="0x0000000000000000000000000000000000000000000000000000000000000000"

# RPC - change this based on shard you want to deploy to
RPCURL="http://rpc.cyprus3.colosseum.quaiscan.io" # cyprus 3 colosseum rpc endpoint

nano hardhat.config.js
/**
 * @type import('hardhat/config').HardhatUserConfig
 */

require('@nomicfoundation/hardhat-toolbox');
const dotenv = require('dotenv');
dotenv.config({ path: '.env' });

module.exports = {
  defaultNetwork: 'colosseum',
  networks: {
    // testnet
    colosseum: {
      url: `${process.env.RPCURL}`,
      accounts: [process.env.PRIVKEY],
      chainId: 9000, // colosseum chainId
    },
    // devnet
    garden: {
      url: `${process.env.RPCURL}`,
      accounts: [process.env.PRIVKEY],
      chainId: 12000, // garden chainId
    },

    // local
    local: {
      url: `${process.env.RPCURL}`,
      accounts: [process.env.PRIVKEY],
      chainId: 1337, // local chainId
    },
  },

  // include compiler version defined in your smart contract
  solidity: {
    compilers: [
      {
        version: '0.8.9',
      },
    ],
  },

  paths: {
    sources: './contracts',
    cache: './cache',
    artifacts: './artifacts',
  },
  mocha: {
    timeout: 20000,
  },
};

npx hardhat compile
nano deploy.js
const quais = require('quais');
const { pollFor } = require('quais-polling');
const GreeterJson = require('../artifacts/contracts/Greeter.sol/Greeter.json');

async function main() {
  const quaisProvider = new quais.providers.JsonRpcProvider(hre.network.config.url);
  const walletWithProvider = new quais.Wallet(hre.network.config.accounts[0], quaisProvider);
  await quaisProvider.ready;

  const QuaisContract = new quais.ContractFactory(GreeterJson.abi, GreeterJson.bytecode, walletWithProvider);
  const quaisContract = await QuaisContract.deploy('Hello Quai', {
    gasLimit: 1000000,
  });

  // Use quais-polling to wait for contract to be deployed
  const deployReceipt = await pollFor(
    quaisProvider, // provider passed to poller
    'getTransactionReceipt', // method to call on provider
    [quaisContract.deployTransaction.hash], // params to pass to method
    1.5, // initial polling interval in seconds
    1 // request timeout in seconds
  );
  console.log('Contract deployed to address: ', deployReceipt.contractAddress);
}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
npx hardhat run scripts/deploy.js --network colosseum
